'use client'

import { useState, useEffect } from 'react'

interface Question {
  id: string
  category: 'values' | 'lifestyle' | 'personality' | 'relationships' | 'fun'
  question: string
  type: 'single' | 'multiple' | 'scale' | 'text'
  options?: string[]
  emoji?: string
}

const questions: Question[] = [
  // VALEURS PROFONDES (5 questions)
  {
    id: 'values_1',
    category: 'values',
    question: "Qu'est-ce qui est le plus important pour toi dans la vie ?",
    type: 'single',
    emoji: 'üí´',
    options: [
      'La famille et les relations proches',
      'La carri√®re et la r√©ussite professionnelle',
      'L\'aventure et les nouvelles exp√©riences',
      'La stabilit√© et la s√©curit√©',
      'La cr√©ativit√© et l\'expression personnelle',
      'L\'impact social et aider les autres'
    ]
  },
  {
    id: 'values_2',
    category: 'values',
    question: "Comment vois-tu ton futur dans 5 ans ?",
    type: 'multiple',
    emoji: 'üîÆ',
    options: [
      'Mari√©(e) avec des enfants',
      'Voyageant autour du monde',
      'Dirigeant ma propre entreprise',
      'Dans une relation stable sans enfants',
      'Focalis√©(e) sur ma carri√®re',
      'Vivant une vie simple et paisible'
    ]
  },
  {
    id: 'values_3',
    category: 'values',
    question: "Qu'est-ce qui te fait sentir le plus accompli(e) ?",
    type: 'single',
    emoji: 'üèÜ',
    options: [
      'Aider quelqu\'un dans le besoin',
      'Atteindre un objectif difficile',
      'Cr√©er quelque chose de nouveau',
      '√ätre reconnu(e) pour mon travail',
      'Passer du temps de qualit√© avec mes proches',
      'Apprendre quelque chose de nouveau'
    ]
  },
  {
    id: 'values_4',
    category: 'values',
    question: "Ta relation avec l'argent ?",
    type: 'single',
    emoji: 'üí∞',
    options: [
      'C\'est un outil pour vivre confortablement',
      'Important mais pas ma priorit√©',
      'J\'aime √©conomiser pour le futur',
      'Je pr√©f√®re d√©penser pour des exp√©riences',
      'Le minimum vital me suffit',
      'C\'est tr√®s important pour moi'
    ]
  },
  {
    id: 'values_5',
    category: 'values',
    question: "Ta philosophie de vie en une phrase ?",
    type: 'single',
    emoji: 'üåü',
    options: [
      'Vivre chaque jour comme si c\'√©tait le dernier',
      'Travailler dur, jouer dur',
      'La famille avant tout',
      'Suivre ses passions',
      'L\'√©quilibre en toute chose',
      'Faire une diff√©rence dans le monde'
    ]
  },

  // LIFESTYLE (5 questions)
  {
    id: 'lifestyle_1',
    category: 'lifestyle',
    question: "Ton weekend id√©al ?",
    type: 'single',
    emoji: 'üéâ',
    options: [
      'Soir√©e entre amis et sorties',
      'Netflix, canap√© et tranquillit√©',
      'Randonn√©e ou activit√©s en plein air',
      'Brunch et shopping',
      'Projets cr√©atifs ou hobbies',
      'Voyage spontan√©'
    ]
  },
  {
    id: 'lifestyle_2',
    category: 'lifestyle',
    question: "Tu es plut√¥t du matin ou du soir ?",
    type: 'scale',
    emoji: 'üåÖ',
    options: ['L√®ve-t√¥t (5h-7h)', 'Matin (7h-9h)', 'Normal (9h-11h)', 'Tard (11h+)', 'Couche-tard (2h+)']
  },
  {
    id: 'lifestyle_3',
    category: 'lifestyle',
    question: "Ton rapport au sport ?",
    type: 'single',
    emoji: 'üí™',
    options: [
      'Je m\'entra√Æne presque tous les jours',
      '2-3 fois par semaine',
      'Quand j\'ai la motivation',
      'Je d√©teste le sport',
      'Je pr√©f√®re les activit√©s douces (yoga, marche)',
      'Sports d\'√©quipe uniquement'
    ]
  },
  {
    id: 'lifestyle_4',
    category: 'lifestyle',
    question: "Animaux de compagnie ?",
    type: 'single',
    emoji: 'üêæ',
    options: [
      'J\'ai d√©j√† un/des animaux',
      'J\'en veux absolument',
      'Pourquoi pas',
      'Seulement des chats',
      'Seulement des chiens',
      'Pas du tout'
    ]
  },
  {
    id: 'lifestyle_5',
    category: 'lifestyle',
    question: "Ton environnement de vie id√©al ?",
    type: 'single',
    emoji: 'üè°',
    options: [
      'Centre-ville anim√©',
      'Banlieue tranquille',
      'Campagne paisible',
      'Pr√®s de la mer',
      'Montagne',
      'Je change souvent'
    ]
  },

  // PERSONNALIT√â (5 questions)
  {
    id: 'personality_1',
    category: 'personality',
    question: "Dans un groupe, tu es plut√¥t ?",
    type: 'single',
    emoji: 'üë•',
    options: [
      'Le/la leader qui prend les d√©cisions',
      'Le/la m√©diateur qui apaise les tensions',
      'L\'organisateur qui planifie tout',
      'Le/la cr√©atif avec les id√©es folles',
      'L\'observateur silencieux',
      'Le/la boute-en-train qui anime'
    ]
  },
  {
    id: 'personality_2',
    category: 'personality',
    question: "Comment g√®res-tu les conflits ?",
    type: 'single',
    emoji: 'ü§ù',
    options: [
      'Discussion calme et rationnelle',
      'J\'√©vite les conflits au maximum',
      'J\'exprime mes √©motions directement',
      'Je prends du recul avant de r√©agir',
      'Je cherche un compromis',
      'Je peux √™tre t√™tu(e) sur mes positions'
    ]
  },
  {
    id: 'personality_3',
    category: 'personality',
    question: "Ton plus grand d√©faut selon tes amis ?",
    type: 'single',
    emoji: 'üòÖ',
    options: [
      'Trop perfectionniste',
      'Toujours en retard',
      'Trop direct(e)/franc(he)',
      'Ind√©cis(e)',
      'Trop sensible',
      'Workaholic'
    ]
  },
  {
    id: 'personality_4',
    category: 'personality',
    question: "Tu prends des d√©cisions plut√¥t avec ?",
    type: 'scale',
    emoji: 'üß†',
    options: ['100% Logique', '75% Logique', '50/50', '75% √âmotions', '100% √âmotions']
  },
  {
    id: 'personality_5',
    category: 'personality',
    question: "Ton niveau d'organisation ?",
    type: 'scale',
    emoji: 'üìÖ',
    options: ['Chaos total', 'D√©sorganis√©', 'Normal', 'Bien organis√©', 'Monica de Friends']
  },

  // RELATIONS (5 questions)
  {
    id: 'relationships_1',
    category: 'relationships',
    question: "Dans une relation, tu as besoin de ?",
    type: 'multiple',
    emoji: '‚ù§Ô∏è',
    options: [
      'Beaucoup d\'ind√©pendance',
      'Communication constante',
      'Affection physique',
      'Stabilit√© √©motionnelle',
      'Aventure et spontan√©it√©',
      'Rires et l√©g√®ret√©'
    ]
  },
  {
    id: 'relationships_2',
    category: 'relationships',
    question: "Tes love languages pr√©f√©r√©s ?",
    type: 'multiple',
    emoji: 'üíï',
    options: [
      'Mots d\'affirmation',
      'Temps de qualit√©',
      'Cadeaux',
      'Actes de service',
      'Contact physique'
    ]
  },
  {
    id: 'relationships_3',
    category: 'relationships',
    question: "Deal-breaker absolu ?",
    type: 'single',
    emoji: 'üö´',
    options: [
      'Manque d\'ambition',
      'Infid√©lit√©',
      'Manque d\'humour',
      'Valeurs diff√©rentes',
      'Mauvaise communication',
      'Manque d\'ind√©pendance'
    ]
  },
  {
    id: 'relationships_4',
    category: 'relationships',
    question: "Ta jalousie sur une √©chelle ?",
    type: 'scale',
    emoji: 'üò§',
    options: ['Z√©ro jalousie', 'Peu jaloux', 'Normal', 'Assez jaloux', 'Tr√®s jaloux']
  },
  {
    id: 'relationships_5',
    category: 'relationships',
    question: "Enfants ?",
    type: 'single',
    emoji: 'üë∂',
    options: [
      'J\'en ai d√©j√†',
      'J\'en veux absolument',
      'J\'en veux plus tard',
      'Peut-√™tre un jour',
      'Je n\'en veux pas',
      'Ind√©cis(e)'
    ]
  },

  // FUN & QUIRKY (5 questions)
  {
    id: 'fun_1',
    category: 'fun',
    question: "Pineapple sur la pizza ?",
    type: 'single',
    emoji: 'üçï',
    options: [
      'Crime contre l\'humanit√©',
      'Team ananas forever',
      'Je m\'en fiche'
    ]
  },
  {
    id: 'fun_2',
    category: 'fun',
    question: "Superpouvoir de r√™ve ?",
    type: 'single',
    emoji: 'ü¶∏',
    options: [
      'T√©l√©portation',
      'Lire dans les pens√©es',
      'Voler',
      'Invisibilit√©',
      'Voyager dans le temps',
      'Parler aux animaux'
    ]
  },
  {
    id: 'fun_3',
    category: 'fun',
    question: "Ton guilty pleasure ?",
    type: 'single',
    emoji: 'üôà',
    options: [
      'T√©l√©-r√©alit√©',
      'ASMR',
      'TikTok jusqu\'√† 3h du mat',
      'Chansons Disney',
      'Rom-coms clich√©s',
      'Jeux mobiles addictifs'
    ]
  },
  {
    id: 'fun_4',
    category: 'fun',
    question: "Si ta vie √©tait une s√©rie ?",
    type: 'single',
    emoji: 'üì∫',
    options: [
      'Friends - Com√©die entre potes',
      'Game of Thrones - Drame √©pique',
      'The Office - Com√©die absurde',
      'Stranger Things - Myst√©rieux',
      'Emily in Paris - Glamour',
      'Breaking Bad - Intense'
    ]
  },
  {
    id: 'fun_5',
    category: 'fun',
    question: "Ton emoji pr√©f√©r√© ?",
    type: 'single',
    emoji: 'üòä',
    options: ['üòÇ', '‚ù§Ô∏è', 'üî•', '‚ú®', 'ü§î', 'üò≠']
  }
]

export default function OnboardingPage() {
  const [currentQuestion, setCurrentQuestion] = useState(0)
  const [answers, setAnswers] = useState<Record<string, any>>({})
  const [selectedOptions, setSelectedOptions] = useState<string[]>([])
  const [textAnswer, setTextAnswer] = useState('')
  const [isComplete, setIsComplete] = useState(false)

  const question = questions[currentQuestion]
  const progress = ((currentQuestion + 1) / questions.length) * 100

  const handleSingleAnswer = (option: string) => {
    setAnswers({ ...answers, [question.id]: option })
    setTimeout(() => nextQuestion(), 300)
  }

  const handleMultipleAnswer = (option: string) => {
    if (selectedOptions.includes(option)) {
      setSelectedOptions(selectedOptions.filter(o => o !== option))
    } else {
      setSelectedOptions([...selectedOptions, option])
    }
  }

  const handleScaleAnswer = (value: string) => {
    setAnswers({ ...answers, [question.id]: value })
    setTimeout(() => nextQuestion(), 300)
  }

  const nextQuestion = () => {
    if (question.type === 'multiple') {
      setAnswers({ ...answers, [question.id]: selectedOptions })
      setSelectedOptions([])
    } else if (question.type === 'text') {
      setAnswers({ ...answers, [question.id]: textAnswer })
      setTextAnswer('')
    }

    if (currentQuestion < questions.length - 1) {
      setCurrentQuestion(currentQuestion + 1)
    } else {
      completeOnboarding()
    }
  }

  const previousQuestion = () => {
    if (currentQuestion > 0) {
      setCurrentQuestion(currentQuestion - 1)
    }
  }

  const completeOnboarding = () => {
    // Sauvegarder les r√©ponses
    localStorage.setItem('onboarding_answers', JSON.stringify(answers))
    localStorage.setItem('onboarding_complete', 'true')
    setIsComplete(true)
  }

  const getCategoryColor = (category: string) => {
    switch(category) {
      case 'values': return 'from-purple-500 to-pink-500'
      case 'lifestyle': return 'from-blue-500 to-cyan-500'
      case 'personality': return 'from-green-500 to-emerald-500'
      case 'relationships': return 'from-red-500 to-pink-500'
      case 'fun': return 'from-yellow-500 to-orange-500'
      default: return 'from-gray-500 to-gray-600'
    }
  }

  const getCategoryName = (category: string) => {
    switch(category) {
      case 'values': return 'Valeurs'
      case 'lifestyle': return 'Lifestyle'
      case 'personality': return 'Personnalit√©'
      case 'relationships': return 'Relations'
      case 'fun': return 'Fun'
      default: return ''
    }
  }

  if (isComplete) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-900 via-pink-900 to-red-900 flex items-center justify-center">
        <div className="text-center">
          <div className="text-6xl mb-6">üéâ</div>
          <h1 className="text-4xl font-bold text-white mb-4">
            Profil Compl√©t√© !
          </h1>
          <p className="text-white/80 text-xl mb-8">
            On analyse tes r√©ponses pour te trouver le match parfait...
          </p>
          <div className="bg-white/10 backdrop-blur-md rounded-2xl p-6 max-w-md mx-auto">
            <p className="text-white mb-4">
              Tu recevras une notification lundi prochain avec ton match de la semaine !
            </p>
            <button
              onClick={() => window.location.href = '/dashboard'}
              className="bg-gradient-to-r from-pink-500 to-purple-500 text-white px-8 py-3 rounded-full font-semibold hover:from-pink-600 hover:to-purple-600 transition"
            >
              Voir mon Dashboard
            </button>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-900 via-pink-900 to-red-900">
      {/* Header */}
      <div className="bg-black/20 backdrop-blur-md border-b border-white/10">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div className="text-white font-bold text-xl">
              üíò Love Quest
            </div>
            <div className="text-white/60 text-sm">
              Question {currentQuestion + 1} / {questions.length}
            </div>
          </div>
          {/* Progress Bar */}
          <div className="mt-4 bg-white/10 rounded-full h-2 overflow-hidden">
            <div 
              className="bg-gradient-to-r from-pink-500 to-purple-500 h-full transition-all duration-500"
              style={{ width: `${progress}%` }}
            />
          </div>
        </div>
      </div>

      {/* Question Content */}
      <div className="container mx-auto px-4 py-8 max-w-3xl">
        <div className="bg-white/10 backdrop-blur-md rounded-3xl p-8">
          {/* Category Badge */}
          <div className="mb-6 text-center">
            <span className={`inline-flex items-center gap-2 bg-gradient-to-r ${getCategoryColor(question.category)} text-white px-4 py-2 rounded-full text-sm font-semibold`}>
              {question.emoji} {getCategoryName(question.category)}
            </span>
          </div>

          {/* Question */}
          <h2 className="text-2xl md:text-3xl font-bold text-white text-center mb-8">
            {question.question}
          </h2>

          {/* Options */}
          <div className="space-y-3">
            {question.type === 'single' && question.options?.map((option, index) => (
              <button
                key={index}
                onClick={() => handleSingleAnswer(option)}
                className="w-full p-4 bg-white/10 hover:bg-white/20 rounded-xl text-white text-left transition-all hover:scale-[1.02] border border-white/20"
              >
                {option}
              </button>
            ))}

            {question.type === 'multiple' && (
              <>
                <div className="space-y-3 mb-6">
                  {question.options?.map((option, index) => (
                    <button
                      key={index}
                      onClick={() => handleMultipleAnswer(option)}
                      className={`w-full p-4 rounded-xl text-white text-left transition-all border ${
                        selectedOptions.includes(option) 
                          ? 'bg-gradient-to-r from-pink-500/30 to-purple-500/30 border-pink-500' 
                          : 'bg-white/10 hover:bg-white/20 border-white/20'
                      }`}
                    >
                      <span className="flex items-center justify-between">
                        {option}
                        {selectedOptions.includes(option) && <span>‚úì</span>}
                      </span>
                    </button>
                  ))}
                </div>
                <button
                  onClick={nextQuestion}
                  disabled={selectedOptions.length === 0}
                  className="w-full bg-gradient-to-r from-pink-500 to-purple-500 text-white px-6 py-3 rounded-full font-semibold hover:from-pink-600 hover:to-purple-600 transition disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Continuer ({selectedOptions.length} s√©lectionn√©{selectedOptions.length > 1 ? 's' : ''})
                </button>
              </>
            )}

            {question.type === 'scale' && (
              <div className="space-y-3">
                {question.options?.map((option, index) => (
                  <button
                    key={index}
                    onClick={() => handleScaleAnswer(option)}
                    className="w-full p-4 bg-white/10 hover:bg-white/20 rounded-xl text-white transition-all hover:scale-[1.02] border border-white/20"
                  >
                    <div className="flex items-center justify-between">
                      <span>{option}</span>
                      <div className="flex gap-1">
                        {[...Array(5)].map((_, i) => (
                          <div
                            key={i}
                            className={`w-2 h-2 rounded-full ${
                              i <= index ? 'bg-white' : 'bg-white/30'
                            }`}
                          />
                        ))}
                      </div>
                    </div>
                  </button>
                ))}
              </div>
            )}

            {question.type === 'text' && (
              <>
                <textarea
                  value={textAnswer}
                  onChange={(e) => setTextAnswer(e.target.value)}
                  placeholder="Ta r√©ponse..."
                  className="w-full p-4 bg-white/10 rounded-xl text-white placeholder-white/50 border border-white/20 focus:outline-none focus:border-white/40 min-h-[120px]"
                />
                <button
                  onClick={nextQuestion}
                  disabled={textAnswer.trim().length === 0}
                  className="w-full bg-gradient-to-r from-pink-500 to-purple-500 text-white px-6 py-3 rounded-full font-semibold hover:from-pink-600 hover:to-purple-600 transition disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Continuer
                </button>
              </>
            )}
          </div>

          {/* Navigation */}
          <div className="flex justify-between items-center mt-8">
            <button
              onClick={previousQuestion}
              disabled={currentQuestion === 0}
              className="text-white/60 hover:text-white transition disabled:opacity-30 disabled:cursor-not-allowed"
            >
              ‚Üê Pr√©c√©dent
            </button>
            <button
              onClick={() => setCurrentQuestion(questions.length - 1)}
              className="text-white/60 hover:text-white transition text-sm"
            >
              Passer ‚Üí
            </button>
          </div>
        </div>

        {/* Tips */}
        <div className="mt-6 text-center text-white/60 text-sm">
          üí° Sois honn√™te, il n'y a pas de mauvaise r√©ponse. L'authenticit√© cr√©e les meilleures connexions.
        </div>
      </div>
    </div>
  )
}